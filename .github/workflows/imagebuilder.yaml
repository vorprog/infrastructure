on: # https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads
  workflow_dispatch:
    inputs:  # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#onworkflow_dispatchinputs
      target_job:
        type: choice
        options:
          - create-infrastucture-configuration
          - create-component
          - create-recipe-and-image
          - build-image
      app_repo:
        default: vorprog/go-api
      app_version:
        default: '0.0.0'
defaults: { run: { shell: 'bash -ex {0}' } } # https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#custom-shell
env:
  EOF: _EOF_${{ github.run_number }}_
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: us-west-2
  BASE_AMI_OWNER_ID: 099720109477 # CANONICAL
  BASE_AMI_NAME_PREFIX: ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-arm64-server
jobs:
  create-infrastucture-configuration:
    if: github.event.inputs.target_job == 'create-infrastucture-configuration'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: |
          aws s3 cp s3://vorprog-github-env/github.env github.env
          cat github.env >> "$GITHUB_ENV"
      - name: Create infrastructure configuration
        env:
          AWS_IMAGEBUILDER_CREATE_INFRASTRUCTURE_CONFIGURATION_INPUT_YAML: | # https://docs.aws.amazon.com/imagebuilder/latest/userguide/toe-use-documents.html
            name: default
            instanceProfileName: default
        run: |
          echo "infra thing is ${{ env.INFRASTRUCTURE_CONFIGURATION_OUTPUT }}"
          echo "blaaa"
          echo "${{ env.AWS_IMAGEBUILDER_CREATE_INFRASTRUCTURE_CONFIGURATION_INPUT_YAML }}" > input.yaml
          aws imagebuilder create-infrastructure-configuration --cli-input-yaml file://input.yaml | node toGithubEnv.js INFRASTRUCTURE_CONFIGURATION_OUTPUT
          aws s3 cp "$GITHUB_ENV" s3://vorprog-github-env/github.env
  create-component:
    if: github.event.inputs.target_job == 'create-component'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/cache@v3
        with:
          key: infrastructure-state
          path: GITHUB_ENV
      - name: Create component
        env:
          AWS_IMAGEBUILDER_CREATE_COMPONENT_INPUT_YAML: | # https://docs.aws.amazon.com/imagebuilder/latest/userguide/toe-use-documents.html
            name: systemd-services
            semanticVersion: 0.0.${{ github.run_number }}
            platform: Linux
            data: |
              schemaVersion: 1.0
              parameters:
                - param_app_name:
                    type: string
                - param_app_version:
                    type: string
                - param_litestream_version:
                    type: string
                - param_aws_region:
                    type: string
              phases:
                - name: build
                  steps:
                    - name: install-packages
                      action: ExecuteBash
                      inputs:
                        commands:
                          - wget https://github.com/benbjohnson/litestream/releases/download/v{{ param_litestream_version}}/litestream-{{ param_litestream_version}}-linux-arm64.deb
                          - sudo dpkg --install litestream-{{ param_litestream_version}}-linux-arm64.deb
                          - wget https://github.com/${{ github.repository_owner }}/{{ param_app_name }}/releases/download/v{{ param_app_version }}/{{ param_app_version }}-linux-arm64 -O /app/app
                          - sudo apt-get install bpftrace
#                    - name: Create litestream config file
#                      action: CreateFile
#                      inputs:
#                        - path: /etc/litestream.yml
#                          content: | # https://litestream.io/reference/config/
#                            s3:
#                              bucket: ${{ github.repository_owner }}-{{ param_app_name }}-data
#                              region: {{ param_aws_region }}
#                            streams:
#                              - name: ${{ github.repository_owner }}-{{ param_app_name }}
#                                path: /app/data.db
#                                url: s3://${{ github.repository_owner }}-{{ param_app_name }}-data
#                    - name: Create bpftrace service unit file
#                      action: CreateFile
#                      inputs:
#                        - path: /etc/systemd/system/bpftrace.service
#                          content: |
#                            [Unit]
#                            Name=bpftrace
#                            After=network.target
#                            [Service]
#                            Type=simple
#                            ExecStart=/usr/bin/bpftrace /app/bpftrace/trace.bt > /var/log/bpftrace.s3.log
#                            Restart=on-failure
#                            [Install]
#                            WantedBy=multi-user.target
#                    - name: Create aws s3 sync service unit file
#                      action: CreateFile
#                      inputs:
#                        - path: /etc/systemd/system/aws-s3-sync.service
#                          content: |
#                            [Unit]
#                            Name=s3-sync-logs
#                            After=network.target
#                            [Service]
#                            Type=simple
#                            ExecStart=aws s3 sync --exclude "*" --include "*.s3.log" /var/log/ s3://${{ github.repository_owner }}-{{ param_app_name }}-logs/"%H"
#                            Restart=on-failure
#                            [Install]
#                            WantedBy=multi-user.target
#                    - name: Create main app service unit file
#                      action: CreateFile
#                      inputs:
#                        - path: /etc/systemd/system/app.service
#                          content: |
#                            [Unit]
#                            Name=app
#                            After=network.target
#                            [Service]
#                            Type=simple
#                            EnvironmentFile=/app/.env
#                            ExecStart=/app/app
#                            Restart=on-failure
#                            [Install]
#                            WantedBy=multi-user.target
#                    - name: Reboot
#                      action: Reboot
#                      inputs:
#                        delaySeconds: 60
        run: |
          echo "${{ env.AWS_IMAGEBUILDER_CREATE_COMPONENT_INPUT_YAML }}" > input.yaml
          echo "COMPONENT_OUTPUT<<$EOF" >> $GITHUB_ENV
          aws imagebuilder create-component --cli-input-yaml file://input.yaml >> $GITHUB_ENV
          echo "$EOF" >> $GITHUB_ENV
  create-recipe-and-image:
    if: github.event.inputs.target_job == 'create-recipe-and-image'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/cache@v3
        with:
          key: infrastructure-state
          path: GITHUB_ENV
      - name: Get latest litestream version
        run: |
          echo "LITESTREAM_VERSION_OUTPUT<<$EOF" >> $GITHUB_ENV
          gh api repos/benbjohnson/litestream/releases/latest --jq '.tag_name' | tr -d '"' >> $GITHUB_ENV
          echo "$EOF" >> $GITHUB_ENV
      - name: Get base image
        run: | # https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-filter.html
          echo "BASE_IMAGE_OUTPUT<<$EOF" >> $GITHUB_ENV
          aws ec2 describe-images \
          --filters "Name=name,Values=${{ env.BASE_AMI_NAME_PREFIX }}-*" "Name=owner-id,Values=${{ env.BASE_AMI_OWNER_ID }}" \
          --query 'sort_by(Images, &CreationDate)[-1]' >> $GITHUB_ENV
          echo "$EOF" >> $GITHUB_ENV
      - name: Create recipe
        env:
          AWS_IMAGEBUILD_CREATE_RECIPE_INPUT_YAML: |
            name: StandardAppRecipe
            semanticVersion: ${{ github.event.inputs.app_version }}
            parentImage: ${{ fromJson(env.BASE_IMAGE_OUTPUT).ImageId }}
            components:
              - componentArn: ${{ fromJson(env.COMPONENT_OUTPUT).ComponentBuildVersionArn }}
                parameters:
                  - name: param_app_name
                    value: ${{ github.event.inputs.app_repo }}
                  - name: param_app_version
                    value: ${{ github.event.inputs.app_version }}
                  - name: param_litestream_version
                    value: ${{ env.LITESTREAM_VERSION_OUTPUT }}
                  - name: param_aws_region
                    value: ${{ env.AWS_DEFAULT_REGION }}
        run:
          echo "${{ env.AWS_IMAGEBUILD_CREATE_RECIPE_INPUT_YAML }}" > input.yaml
          echo "RECIPE_OUTPUT<<$EOF" >> $GITHUB_ENV
          aws imagebuilder create-recipe --cli-input-yaml file://input.yaml >> $GITHUB_ENV
          echo "$EOF" >> $GITHUB_ENV
      - name: Create image
        env:
          AWS_IMAGEBUILDER_CREATE_IMAGE_INPUT_YAML: |
            name: ${{ github.event.inputs.app_repo }}_${{ github.event.inputs.app_version }}
            semanticVersion: ${{ github.event.inputs.app_version }}
            recipeArn: ${{ fromJson(env.RECIPE_OUTPUT).RecipeArn }}
            infrastructureConfigurationArn: ${{ fromJson(env.INFRASTRUCTURE_CONFIGURATION_OUTPUT).InfrastructureConfigurationArn }}}
        run: |
          echo "${{ env.AWS_IMAGEBUILDER_CREATE_IMAGE_INPUT_YAML }}" > input.yaml
          echo "IMAGE_OUTPUT<<$EOF" >> $GITHUB_ENV
          aws imagebuilder create-image --cli-input-yaml file://input.yaml >> $GITHUB_ENV
          echo "$EOF" >> $GITHUB_ENV
  build-image:
    if: github.event.inputs.target_job == 'build-image'
    runs-on: ubuntu-latest
    steps:
      - uses: docker/setup-qemu-action@master
        with: 
          platforms: 'arm64,arm'
      - uses: hashicorp/setup-packer@main
      - uses: actions/checkout@main
      - name: set packer file
        env:
          ISO_URL: http://www.releases.ubuntu.com/20.04/ubuntu-20.04.2-live-server-amd64.iso
          ISO_CHECKSUM: sha256:d1f2bf834bbe9bb43faf16f9be992a6f3935e65be0edece1dee2aa6eb1767423
          PACKER_YAML: | # https://www.puppeteers.net/blog/two-stage-qemu-builds-with-packer/
            required_plugins: # https://developer.hashicorp.com/packer/docs/plugins/install-plugins
              qemu: # https://github.com/hashicorp/packer-plugin-qemu
                source: github.com/hashicorp/qemu
                version: ">= 1.0.9"
            builders: # https://developer.hashicorp.com/packer/docs/templates/legacy_json_templates/builders
              - name: iso
                type: qemu # https://developer.hashicorp.com/packer/plugins/builders/qemu
                qemu_binary: qemu-system-aarch64
                qemuargs:
                    - [ "-m", "2048M" ]
                    - [ "-cpu", "host" ]
                    - [ "-machine", "virt,gic-version=max,accel=kvm" ]
                    - [ "-boot", "strict=on" ]
                    - [ "-bios", "/usr/share/AAVMF/AAVMF_CODE.fd" ]
                    - [ "-monitor", "none" ]
                memory: 2048M # 1280
                accelerator: kvm
                vm_name: ubuntu-iso-build
                output_directory: ubuntu-iso-output
                iso_url: ${{ env.ISO_URL }}
                iso_checksum: ${{ env.ISO_CHECKSUM }}
                disk_image: false
                disk_size: 5000M
                disk_interface: virtio # virtio-scsi
                format: qcow2
                net_device: virtio-net
                headless: true
                http_directory: ubuntu/http # http
                shutdown_command: "echo 'packer' | sudo -S shutdown -P now" # shutdown -P now
                ssh_username: root # openvpnas
                ssh_password: ubuntu
                ssh_timeout: 1200s
                # vnc_bind_address: 0.0.0.0
                boot_wait: 10s
                boot_command:
                  - " <up><wait>" # Make the language selector appear...
                  - " <up><wait><esc><wait>"  # ...then get rid of it
                  - "<f6><wait><esc><wait>" # Go to the other installation options menu and leave it
                  # Remove the kernel command-line that already exists
                  - "<bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs>"
                  - "<bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs>"
                  - "<bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs>"
                  # Add kernel command-line and start install
                  - "/casper/vmlinuz "
                  - "initrd=/casper/initrd "
                  - "autoinstall "
                  - "ds=nocloud-net;s=http://{{.HTTPIP}}:{{.HTTPPort}}/ubuntu/ "
                  - "<enter>"
                # - c<wait>
                # - linux /images/pxeboot/vmlinuz inst.stage2=hd:LABEL=OL-8-2-0-BaseOS-aarch64 ro
                # - 'inst.text biosdevname=0 net.ifnames=0 '
                # - ks=http://{{ .HTTPIP }}:{{ .HTTPPort }}/ol82-ks.cfg<enter>
                # - initrd /images/pxeboot/initrd.img<enter>
                # - boot<enter><wait>
              - name: img
                type: qemu
                qemu_binary: qemu-system-aarch64
                qemuargs:
                    - [ "-m", "2048M" ]
                    - [ "-cpu", "host" ]
                    - [ "-machine", "virt,gic-version=max,accel=kvm" ]
                    - [ "-boot", "strict=on" ]
                    - [ "-bios", "/usr/share/AAVMF/AAVMF_CODE.fd" ]
                    - [ "-monitor", "none" ]
                memory: 2048M # 1280
                accelerator: kvm
                vm_name: ubuntu-img-build
                output_directory: ubuntu-img-output
                iso_url: ubuntu-iso-output/ubuntu-iso-build
                iso_checksum: none # Checking the checksum would be pointless as we just built the source image
                disk_image: true
                disk_size: 5000M
                disk_interface: virtio
                format: qcow2
                net_device: virtio-net
                headless: true
                shutdown_command: echo 'packer' | sudo -S shutdown -P now
                ssh_username: root # openvpnas
                ssh_password: ubuntu
                ssh_timeout: 60m
                boot_wait: 10s
            provisioners: # https://developer.hashicorp.com/packer/docs/provisioners/shell
              - pause_before: 5s
                type: shell 
                inline:
                  - apt-get update
                  - apt-get install -y qemu-guest-agent
                  - mkdir /etc/cloud
                  - touch /etc/cloud/cloud-init.disabled
                  - apt-get install -y cloud-init
                  - rm /etc/cloud/cloud-init.disabled
            post-processors: # https://developer.hashicorp.com/packer/docs/post-processors/manifest
              - type: manifest
                output: output.json
        run: |
          yq $PACKER_YAML --output-format json > packer.json
      - name: Run `packer init`
        run: |
          packer init ./packer.json
          packer validate ./packer.json
          packer build ./packer.json
          packer build -only=img.* ubuntu
          packer build -only=iso.* ubuntu
          aws s3 cp ubuntu-img-output/ubuntu-img-build s3://${{ env.S3_IMAGE_BUCKET}}/ubuntu-img-build.${{ github.event.inputs.app_version }}
