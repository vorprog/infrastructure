on: # https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads
  repository_dispatch:
    types: [create-image]
  workflow_dispatch:
    inputs:  # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#onworkflow_dispatchinputs
      manual-workflow-comment:
        description: Manual workflow_dispatch needs at least one input parameter. Use this for comments on the reason for running the workflow manually.
        required: false
        default: Manual workflow_dispatch trigger
defaults: { run: { shell: "bash -ex {0}" } } # https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#custom-shell
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      EOF: _EOF_${{ github.run_id }}_${{ github.run_number }}_
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: us-west-2
      APP_REPO: ${{ github.event.client_payload.app_repo }}
      SEMANTIC_VERSION: 0.0.${{ github.run_number }}
      BASE_AMI_OWNER_ID: 099720109477 # CANONICAL
      BASE_AMI_NAME_PREFIX: ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-arm64-server
    steps:
      - name: Load GITHUB_ENV
        uses: actions/download-artifact@v3
        continue-on-error: true
        with:
          name: ${{ github.workflow }}.env
          path: GITHUB_ENV
      - name: Get latest litestream version
        run: |
          echo "LITESTREAM_VERSION_OUTPUT<<$EOF" >> $GITHUB_ENV
          gh api repos/benbjohnson/litestream/releases/latest --jq '.tag_name' | tr -d '"' >> $GITHUB_ENV
          echo "$EOF" >> $GITHUB_ENV
      - name: Get latest app version
        run: |
          echo "APP_VERSION_OUTPUT<<$EOF" >> $GITHUB_ENV
          gh api repos/${{ env.APP_REPO }}/releases/latest --jq '.tag_name' | tr -d '"' >> $GITHUB_ENV
          echo "$EOF" >> $GITHUB_ENV
      - name: Get base image
        run: | # https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-filter.html
          echo "BASE_IMAGE_OUTPUT<<$EOF" >> $GITHUB_ENV
          aws ec2 describe-images \
          --filters "Name=name,Values=${{ env.BASE_AMI_NAME_PREFIX }}-*" "Name=owner-id,Values=${{ env.BASE_AMI_OWNER_ID }}" \
          --query 'sort_by(Images, &CreationDate)[-1]' >> $GITHUB_ENV
          echo "$EOF" >> $GITHUB_ENV
      - name: Create recipe
        env:
          AWS_IMAGEBUILD_CREATE_RECIPE_INPUT_YAML: |
            name: StandardAppRecipe
            semanticVersion: ${{ env.SEMANTIC_VERSION }}
            parentImage: ${{ fromJson(env.BASE_IMAGE_OUTPUT).ImageId }}
            components:
              - componentArn: ${{ fromJson(env.COMPONENT_OUTPUT).componentBuildVersionArn }}
                parameters:
                  - name: param_app_name
                    value: ${{ env.APP_REPO }}
                  - name: param_app_version
                    value: ${{ env.SEMANTIC_VERSION }}
                  - name: param_litestream_version
                    value: ${{ env.LITESTREAM_VERSION_OUTPUT }}
                  - name: param_aws_region
                    value: ${{ env.AWS_DEFAULT_REGION }}
        run:
          echo "RECIPE_OUTPUT<<$EOF" >> $GITHUB_ENV
          aws imagebuilder create-recipe \
          --cli-input-yaml file://<(echo $AWS_IMAGEBUILD_CREATE_RECIPE_INPUT_YAML) >> $GITHUB_ENV
          echo "$EOF" >> $GITHUB_ENV
      - name: Create image
        env:
          AWS_IMAGEBUILDER_CREATE_IMAGE_INPUT_YAML: |
            name: StandardAppImage
            semanticVersion: ${{ env.SEMANTIC_VERSION }}
            recipeArn: ${{ fromJson(env.RECIPE_OUTPUT).recipeArn }}
            infrastructureConfigurationArn: arn:aws:imagebuilder:us-west-2:123456789012:infrastructure-configuration/StandardAppInfrastructureConfiguration
        run: |
          echo "IMAGE_OUTPUT<<$EOF" >> $GITHUB_ENV
          aws imagebuilder create-image \
          --cli-input-yaml file://<(echo $AWS_IMAGEBUILDER_CREATE_IMAGE_INPUT_YAML) >> $GITHUB_ENV
          echo "$EOF" >> $GITHUB_ENV
      - name: Save GITHUB_ENV
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.workflow }}.env
          path: GITHUB_ENV
